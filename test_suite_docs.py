from pages import *
from links import *

data = load_data("weekly")


class TestSuite:

    def setup_method(self):
        self.driver = webdriver.Chrome("driver\\chromedriver.exe")
        self.driver.maximize_window()
        self.driver.get(Links.main_page)
        page = LoginPage(self.driver)
        page.username(data["username"])
        page.password(data["password"])
        page.submit()
        page.wait.text_appear("Бухгалтерский учет")

    def teardown_method(cls):
        cls.driver.quit()

    def te1st_getting_cash_request(self):
        page = CashPullRequestPage(self.driver)
        page.scroll_to_bottom()
        page.click_by_text("Заявка на получение наличных денег")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        # Реквизиты документа
        page.new_document.account_number("ПАО")
        page.new_document.tracking_number("1233")
        page.new_document.operation("Снятие наличных (деньги в пути) (Все КОСГУ)")
        # Информация о документе
        page.new_document.document_number("88005553535")
        page.new_document.document_date("14.09.2017")
        page.new_document.entry_date("14.09.2017")
        page.new_document.deadline("24.09.2017")
        page.new_document.click_by_text("Дополнительно")
        # Доверенность
        page.new_document.trustee("Попов В.А.")
        page.new_document.trustee_name_dative_case("Попову В.А.")
        page.new_document.trustee_position("Советник")
        page.new_document.trustee_position_dative_case("Советнику")
        page.new_document.foundation("Основание")
        # Чек
        page.new_document.check_series("ME")
        page.new_document.check_number("12333333")
        page.new_document.check_date("12.09.2017")
        page.new_document.check_valid_till("12.09.2018")
        # Подписывающие лица
        page.new_document.manager("Портная Н.О.")
        page.new_document.chief_accountant("Дорофеева Т.Н.")
        page.new_document.click_by_text("Строки документа")
        page.new_document.click_by_text("Добавить")
        page.new_document.click_by_text("Новую строку")
        page.new_document.new_line.kbk("110 1 11 02012 01 0000 120")
        page.new_document.new_line.kbk_type("Группировочный КБК (гКБК)")
        page.new_document.new_line.kosgu("110")
        # page.new_document.new_line.costs_type("")
        page.new_document.new_line.operation("Снятие наличных (деньги в пути) (Все КОСГУ)")
        page.new_document.new_line.funds_source("1 - Средства бюджета")
        page.new_document.new_line.cash_transaction_code("53 Прочие выдачи")
        page.new_document.new_line.code_goal("123334")
        page.new_document.new_line.payment_purpose("Назначение")
        page.new_document.new_line.amount("2300000")
        page.new_document.new_line.comment("Примечание")
        page.new_document.new_line.click_by_text("Сохранить", 2)
        page.new_document.click_by_text("Сохранить")
        page.new_document.click_by_text("Закрыть", 2)
        page.new_document.click_by_text("Закрыть")
        page.filter("88005553535")
        page.click_by_text("Печать")
        page.click_by_text("Действие")
        page.click_by_text("Провести")
        page.holding_request.lddate_prov("12.09.2017")
        page.holding_request.typical_operation("Снятие наличных (деньги в пути) (Все КОСГУ)")
        page.holding_request.submit()
        page.click_by_text("Закрыть")
        page.wait.array_error()

    def te1st_pko(self):
        # ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ Информация о документе
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ Информация о документе")
        page = PKOPage(self.driver)
        page.scroll_to_bottom()
        page.click_by_text("Приходный кассовый ордер")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page.set_select2_wl("documentKind", "Приходный кассовый ордер", "поле Вид документа")
        page.set_text_wl("documentNumber", "2", "Номер")
        # ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ Принято от
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ Принято от")
        page.set_select2_wl("employee", "Петров А.В.", "Сотрудник")
        page.set_select2_wl("organization", "МИФНС России № 46", "Организация", exactly=False)
        assert page.checker.check_text_input("receivedFrom", " УФК по г. Москве (МИФНС России № 46 по г.Москве)")
        page.set_select2_wl("operation", "Получение наличных в кассу", "Типовая операция")
        page.set_select2_wl("departmentUnit", "ФАМИРТ", "Группа учета")
        page.set_text_wl("cashReportNumber", "25", "Номер кассового отчета")
        page.set_text_wl("foundation", "Текст заполнения поля Основание", "Основание")
        # ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Строки документа
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Строки документа")
        page.click_by_text("Строки документа")
        page.line.click_by_text("Добавить")
        page.line.click_by_text("Новую строку")
        sleep(2)
        page.line.set_select2_wl("operation",
                                 "Получение наличных в кассу", "Типовая операция", order=2)
        page.line.set_select2_wl("kosgu", "290", "КОСГУ", exactly=False)
        page.line.set_select2_wl("inventory", "TV кабель", "Номенклатура")
        page.line.set_select2_wl("kbk", "(2017) - Больницы", "КБК", exactly=False)
        page.line.set_select2_wl("expenseType", "Прочие расходы", "Вид затрат")
        page.line.set_text_wl("quantity", "20", "Количество")
        page.line.set_text_wl("amount", "100", "Сумма", order=2)
        page.line.set_text_wl("ndsPercent", "18", "Ставка НДС")
        assert page.checker.check_text_input("amountWithoutNds", "84,75")
        assert page.checker.check_text_input("ndsAmount", "15,25")
        page.line.set_select2_wl("departmentUnit", "ФАМИРТ", "Группа учета", order=2)
        page.line.set_select2_wl("recepient", "Зотова М.В.", "Получатель (МОЛ)")
        page.line.set_text_wl("comment", "Текст заполнения поля Комментарий", "Комментарий", order=2)
        page.line.set_select2_wl("act", "2008 - Договор", "Мероприятие")
        page.line.set_select_wl("CashTransactionCode", "53 Прочие выдачи", "Кассовый символ")
        sleep(2)
        page.line.click_by_text("Сохранить", 2)
        # ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Приложение
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Приложение")
        page.click_by_text("Приложение")
        # ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Проводки
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Проводки")
        page.click_by_text("Проводки")
        # ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Строки документа
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР \ блок Строки документа")
        page.click_by_text("Строки документа")
        # page.accounting.save_screenshot("test1", default_folder="C:\\Test\\")
        sleep(5)
        page.line.click_by_text("Сохранить")
        page.wait.array_error()
        assert page.wait.text_appear("Документ сохранен")
        print("ПРИХОДНЫЙ КАССОВЫЙ ОРДЕР - ДОКУМЕНТ СОХРАНЕН")
        page.click_by_text("Закрыть")

    def te1st_rko(self):
        # Расходный КАССОВЫЙ ОРДЕР \ Информация о документе
        print("Расходный КАССОВЫЙ ОРДЕР \ Информация о документе")
        page = PKOPage(self.driver)
        page.scroll_to_bottom()
        page.click_by_text("Расходный кассовый ордер")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page.set_select2_wl("documentKind", "Расходный кассовый ордер", "поле Вид документа")
        page.set_text_wl("documentNumber", "2", "Номер")
        page.set_date_wl("documentDate", "05.02.2018")
        page.set_date_wl("entryDate", "05.02.2018", "Дата проводки")
        page.set_select2_wl("OperationMaster", "Выплата заработной платы из кассы", "Типовая операция")
        page.set_select2_wl("departmentUnit", "ФАМИРТ", "Группа учета")
        page.set_text_wl("foundation", "Тест", "Основание")
        page.set_text_wl("cashReportNumber", "25", "Номер кассового отчета")
        page.set_select2_wl("employee", "Петров А.В.", "Сотрудник")
        sleep(2)
        page.set_select2_wl("counterparty", 'ПАО "МегаФон"', "Организация")
        sleep(5)
        print("Расходный КАССОВЫЙ ОРДЕР \ блок Строки документа")
        page.click_by_text("Строки документа")
        page.line.click_by_text("Добавить")
        page.line.click_by_text("Новую строку")
        page.wait.array_error()

    def te1st_zkr(self):
        # ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Информация о документе
        print("ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Информация о документе")
        page = ZKRPage(self.driver)
        page.scroll_to_bottom()
        page.click_by_text("Заявка на кассовый расход")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page.set_select2_wl("documentKind", "Заявка на кассовый расход", "поле Вид документа")
        page.set_select2_wl("accountDetails", "14481000320 (Московская обл.)", exactly=False)
        page.set_select2_wl("counterparty", "МИФНС России № 46", "Наименование контрагента или ФИО", exactly=False)
        page.set_text_wl("documentNumber", "3")
        page.set_text_wl("ofkNumber", "77", "Номер УФК")
        assert page.checker.check_text_select("counterpartyAccountDetails", "40101810800000010041")
        sleep(5)
        page.set_date_wl("documentDate", "05.02.2018")
        page.set_date_wl("entryDate", "05.02.2018", "Дата проводки")
        page.set_date_wl("limitDate", "10.02.2018", "Предельная дата исполнения")
        page.set_select2_wl("operation", "(226) Оплата за прочие услуги", "Типовая операция")
        # ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Реквизиты документа
        print("ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Реквизиты документа")
        page.request.click_by_text("Реквизиты документа")
        page.request.set_select2_wl("currency", "Российский рубль", "Код валюты по ОКВ")
        page.request.set_select2_wl("departmentUnit", "ФАМИРТ", "Группа учета")
        page.request.set_select2_wl("faip", "Технопарк МФТИ, поселок Северный", "Код объекта по ФАИП")
        page.request.set_text_wl("priority", "1", "Приоритет исполнения")
        page.request.set_select_wl("paymentForm", "4 – срочно", "Вид платежа")
        page.request.set_text_wl("paymentPurpose", "Текст заполнения поля Назначение платежа", "Назначение платежа")
        # ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Документ-основание
        print("ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Документ-основание")
        page.doc.click_by_text("Документ-основание")
        page.doc.set_select2_wl("foundation", "", "Документ-основание")
        page.doc.set_text_wl("trackingNumber", "8", "Учетный номер обязательства")
        page.doc.set_select2_wl("documentFoundaiontKind", "Договор", "Вид документ-основания")
        page.doc.set_text_wl("documentFoundationNumber", "25", "Учетный номер обязательства")
        page.doc.set_date_wl("documentFoundationDate", "05.02.2018")
        page.doc.set_text_wl("documentFoundationSubject", "Текст заполнения поля Предмет", "Предмет")
        # ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Расшифровка заявки
        print("ЗАЯВКА НА КАССОВЫЙ РАСХОД \ Расшифровка заявки")
        page.click_by_text("Расшифровка заявки")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page.bid.set_select_wl("activityKind", "1 - Средства бюджета", "Вид стредств")
        page.bid.set_select2_wl("operation", "(226) Оплата за прочие услуги", "Типовая операция", order=2)
        page.bid.set_select2_wl("kbk", "(2016) 122 ЦА Командировки 212,222,226",
                                "КБК плательщика", exactly=False, order=2)
        page.bid.set_select_wl("drawee_kbk_type", "Группировочный КБК (гКБК)", "Тип КБК плательщика", order=2)
        page.bid.set_select2_wl("kosgu", "226", "КОСГУ", exactly=False)
        page.bid.set_select2_wl("costElement", "Прочие услуги", "Вид затрат")
        page.bid.set_text_wl("amountWithoutNds", "100", "Сумма без НДС", order=2)
        page.bid.set_text_wl("ndsPercent", "18", "Ставка НДС")
        page.bid.set_text_wl("ndsAmount", "15,25", "Сумма НДС", order=2)
        page.bid.set_text_wl("amount", "84,75", "Сумма в рублях", order=2)
        # assert page.checker.check_text_input("amountWithoutNds", "84,75")
        # assert page.checker.check_text_input("ndsAmount", "15,25")
        page.bid.set_select2_wl("recepientKbk", "РАГС", "КБК получателя")
        # page.set_text_wl("outstandingPaymentDocumentAmount", "100.00","поле Сумма в рублях")
        # page.set_text_wl("ndsPercent", "18","Ставка НДС")
        # assert page.check_text_input("ndsAmount", "15,25")

    def te1st_znv(self):
        # ЗАЯВКА НА ВОЗВРАТ \ шапка документа
        print("ЗАЯВКА НА ВОЗВРАТ \ шапка документа")
        page = ZNVPage(self.driver)
        page.scroll_to_bottom()
        page.click_by_text("Заявка на возврат")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page.set_text_wl("documentNumber", "1", "Номер")
        page.set_date_wl("documentDate", "05.02.2018", "Дата")
        page.set_select2_wl("accountDetails", "14481000320 (Московская обл.)", "поле Лицевой счет", exactly=False)
        page.set_select2_wl("recepient", "", "Наименование получателя")
        # exactly=False исп. для точного совпадения
        page.set_text_wl("ofkRegistrationNumber", "05.02.2018", "Номер УФК")
        page.set_date_wl("entryDate", "05.02.2018", "Дата проводки")
        page.set_select2_wl("operation",
                            "Выбытие средств из временного распоряжения", "Типовая операция", exactly=False)
        page.set_select2_wl("recepientAccountDetails", "", "Банковский счет")
        page.set_select2_wl("documentKind", "Внебанковская заявка на возврат", "Вид документа")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки")
        page.click_by_text("Расшифровка заявки")
        page.request.set_text_wl("outstandingPaymentDocumentAmount", "100.00", "поле Сумма в рублях")
        page.set_text_wl("ndsPercent", "18", "Ставка НДС")
        page.request.set_text_wl("ndsAmount", "", "Сумма НДС")
        # расчетное значение
        page.request.set_select2_wl("kbk", "0410 9970092041 244", "КБК", exactly=False)
        page.request.set_select_wl("kbkType", "Группировочный КБК (гКБК)", "Тип КБК")
        page.request.set_select2_wl("kosgu", "290", "КОСГУ", exactly=False)
        page.request.set_select2_wl("costElement", "Прочие расходы", "Вид затрат")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Дополнительные реквизиты
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Дополнительные реквизиты")
        page.request.set_text_wl("goalCode", "32", "Код цели")
        page.request.set_select2_wl("investmentProgram", "Технопарк МФТИ, поселок Северный", "Код объекта по ФАИП")
        page.request.set_select2_wl("oktmo", "40 333 000", "Код по ОКТМО", exactly=False)
        page.request.set_select2_wl("expenditureGoalAct", "2008 - Договор", "Мероприятие")
        page.request.set_select2_wl("department", "Договор подряда", "Группа учета")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Информация о платеже
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Информация о платеже")
        page.request.set_text_wl("paymentPurpose", "Текст заполнения поля Назначения платежа", "Назначение платежа")
        page.request.set_select_wl("paymentForm", "4 – срочно", "Вид платежа")
        page.request.set_text_wl("paymentPriority", "1", "Очередность платежа")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Документ-основание
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Документ-основание")
        page.request.set_select2_wl("documentFoundationKind", "Акт выполненных работ", "Вид документа-основание")
        page.request.set_text_wl("documentFoundationNumber", "21", "Номер документа-основание")
        page.request.set_date_wl("documentFoundationDate", "05.02.2018", "Дата документа-основания")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Реквизиты получателя
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки \ блок Реквизиты получателя")
        page.request.set_select2_wl("recepientKbk", "РАГС", "КБК получателя")
        page.request.set_select2_wl("recepientOktmo", "город Москва", "Код по ОКТМО Получателя", exactly=False)
        # page.request.save_screenshot("test1", default_folder="C:\\Test\\")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Документ по зачислению невыясненного платежа
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Документ по зачислению невыясненного платежа")
        page.click_by_text("Документ по зачислению невыясненного платежа")
        page.doc.set_text_wl("outstandingPaymentDocumentNumber", "1", "Номер")
        page.doc.set_date_wl("outstandingPaymentDocumentDate", "05.02.2018", "Дата")
        page.doc.set_text_wl("amount", "100.00", "поле Сумма")
        page.doc.set_text_wl("outstandingPaymentDocumentInn", "111", "поле ИНН")
        page.doc.set_text_wl("outstandingPaymentDocumentKpp", "222", "поле КПП")
        # page.doc.save_screenshot("test1", default_folder="C:\\Test\\")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Уполномоченные сотрудники
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Уполномоченные сотрудники")
        page.click_by_text("Уполномоченные сотрудники")
        page.workers.set_select2_wl("chief", "Е.Ю.Петрова", "Руководитель (уполномоченное лицо)", exactly=False)
        page.workers.set_select2_wl("chiefAccountant", "С.В. Васина", "Код по ОКТМО Получателя", exactly=False)
        # page.workers.save_screenshot("test1", default_folder="C:\\Test\\")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Проводки
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Проводки")
        page.click_by_text("Проводки")
        # page.accounting.save_screenshot("test1", default_folder="C:\\Test\\")
        # ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки
        print("ЗАЯВКА НА ВОЗВРАТ \ закладка Расшифровка заявки")
        page.click_by_text("Расшифровка заявки")
        page.request.click_by_text("Сохранить")
        assert page.wait.text_appear("Документ сохранен")
        # assert "" in self.driver.page_source
        print("ЗАЯВКА НА ВОЗВРАТ - ДОКУМЕНТ СОХРАНЕН")
        sleep(10)

    def te1st_income_cash_order(self):
        
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Приходный кассовый ордер")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = IncomingOrderPage(self.driver)
        page.document_kind(data["documents"]["incomeCashOrder"]["documentKind"])
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.employee(data["documents"]["incomeCashOrder"]["employee"])
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        # page.received_from('value') - Принято от
        page.operation(data["documents"]["incomeCashOrder"]["operation"])
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.cash_report_number(data["documents"]["incomeCashOrder"]["cashReportNumber"])
        page.foundation(data["documents"]["incomeCashOrder"]["foundation"])
        page = IncomingOrderAddLinePage(self.driver)
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page.operation(data["documents"]["incomeCashOrder"]["operation"])
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.expense_type(data["documents"]["incomeCashOrder"]["expenseType"])
        page.inventory(data["documents"]["incomeCashOrder"]["inventory"])
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.nds_percent(data["documents"]["incomeCashOrder"]["ndsPercent"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.recepient(data["documents"]["incomeCashOrder"]["recepient"])
        page.cash_transaction_code(data["documents"]["incomeCashOrder"]["cashTransactionCode"])
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.click_by_text("Сохранить", 2)
        page = IncomeCashOrderPlusPage(self.driver)
        page.click_by_text("Приложение")
        page.document_foundation(data["documents"]["incomeCashOrder"]["documentFoundation"])
        page.advance_report(data["documents"]["incomeCashOrder"]["advanceReport"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.chief_accountant(data["documents"]["incomeCashOrder"]["chiefAccountant"])
        page.cashier(data["documents"]["incomeCashOrder"]["cashier"])
        page.click_by_text("Проводки")
        sleep(3)
        page.click_by_text("Сохранить")
        sleep(3)
        page.click_by_text("Закрыть")

    def te1st_account_cash_warrant(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Расходный кассовый ордер")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = AccountCashWarrantPage(self.driver)
        page.document_kind(data["documents"]["accountCashWarrant"]["documentKind"])
        page.document_number(data["documents"]["accountCashWarrant"]["documentNumber"])
        page.document_date(data["documents"]["accountCashWarrant"]["documentDate"])
        page.entry_date(data["documents"]["accountCashWarrant"]["entryDate"])
        page.department_unit(data["documents"]["accountCashWarrant"]["departmentUnit"])
        page.operation_master(data["documents"]["accountCashWarrant"]["operationMaster"])
        page.employee(data["documents"]["accountCashWarrant"]["employee"])
        page.counterparty(data["documents"]["accountCashWarrant"]["organization"])
        page.foundation(data["documents"]["accountCashWarrant"]["foundation"])
        page.cash_report_number(data["documents"]["accountCashWarrant"]["cashReportNumber"])
        # Добавили  строку
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = AccountCashWarrantPageAddLine(self.driver)
        page.operation(data["documents"]["accountCashWarrant"]["operationMaster"])
        page.kbk(data["documents"]["accountCashWarrant"]["kbk"])
        page.kosgu(data["documents"]["accountCashWarrant"]["kosgu"])
        page.cost_element(data["documents"]["accountCashWarrant"]["costElement"])
        page.department_unit(data["documents"]["accountCashWarrant"]["departmentUnit"])
        page.sender(data["documents"]["accountCashWarrant"]["sender"])
        page.material_inventory(data["documents"]["accountCashWarrant"]["materialInventory"])
        page.quantity(data["documents"]["accountCashWarrant"]["quantity"])
        page.amount(data["documents"]["accountCashWarrant"]["amount"])
        page.nds_percent(data["documents"]["accountCashWarrant"]["ndsPercent"])
        page.comment(data["documents"]["accountCashWarrant"]["comment"])
        # page.act('value') - Мероприятие
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Приложение")
        page = AccountCashWarrantPagePlusPage(self.driver)
        page.document_foundation(data["documents"]["accountCashWarrant"]["documentFoundation"])
        page.advance_report(data["documents"]["accountCashWarrant"]["advanceReport"])
        page.supplement(data["documents"]["accountCashWarrant"]["comment"])
        page.accountant(data["documents"]["accountCashWarrant"]["accountant"])
        page.chief(data["documents"]["accountCashWarrant"]["chief"])
        page.cashier(data["documents"]["accountCashWarrant"]["cashier"])
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_application_for_cash_withdrawal(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Заявка на получение наличных денег")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = ApplicationForCashWithdrawalPage(self.driver)
        page.document_number(data["documents"]["applicationForCashWithdrawal"]["documentNumber"])
        page.document_date(data["documents"]["applicationForCashWithdrawal"]["documentDate"])
        page.entry_date(data["documents"]["applicationForCashWithdrawal"]["entryDate"])
        page.deadline(data["documents"]["applicationForCashWithdrawal"]["deadline"])
        page.account_details(data["documents"]["applicationForCashWithdrawal"]["accountDetails"])
        page.tracking_number(data["documents"]["applicationForCashWithdrawal"]["trackingNumber"])
        page.operation_master(data["documents"]["applicationForCashWithdrawal"]["operationMaster"])
        # Вкладка дополнительно
        page.click_by_text("Дополнительно")
        page.trustee(data["documents"]["applicationForCashWithdrawal"]["Trustee"])
        page.check_series(data["documents"]["applicationForCashWithdrawal"]["checkSeries"])
        page.check_number(data["documents"]["applicationForCashWithdrawal"]["checkNumber"])
        page.check_date(data["documents"]["applicationForCashWithdrawal"]["checkDate"])
        page.check_valid_till(data["documents"]["applicationForCashWithdrawal"]["checkValidTill"])
        page.chief(data["documents"]["applicationForCashWithdrawal"]["chief"])
        page.accountant_general(data["documents"]["applicationForCashWithdrawal"]["AccountantGeneral"])
        page.foundation(data["documents"]["applicationForCashWithdrawal"]["foundation"])
        sleep(5)
        # Добавляем строку документа
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = ApplicationForCashWithdrawalAddLinePage(self.driver)
        page.operation_master(data["documents"]["applicationForCashWithdrawal"]["operationMaster"])
        page.kbk_type(data["documents"]["applicationForCashWithdrawal"]["kbkType"])
        page.kbk(data["documents"]["applicationForCashWithdrawal"]["kbk"])
        page.kosgu(data["documents"]["applicationForCashWithdrawal"]["kosgu"])
        page.cost_element(data["documents"]["applicationForCashWithdrawal"]["costElement"])
        page.department_unit(data["documents"]["applicationForCashWithdrawal"]["departmentUnit"])
        # page.act('value')
        page.code_goal(data["documents"]["applicationForCashWithdrawal"]["codeGoal"])
        page.funds_source(data["documents"]["applicationForCashWithdrawal"]["fundsSource"])
        page.cash_transaction_code(data["documents"]["applicationForCashWithdrawal"]["cashTransactionCode"])
        page.amount(data["documents"]["applicationForCashWithdrawal"]["amount"])
        page.payment_purpose(data["documents"]["applicationForCashWithdrawal"]["paymentPurpose"])
        page.comment(data["documents"]["applicationForCashWithdrawal"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_applying_for_card(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Заявка на получение денежных средств, перечисляемых на карту")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = ApplyingForCardPage(self.driver)
        page.document_number(data["documents"]["applyingForCard"]["documentNumber"])
        page.document_date(data["documents"]["applyingForCard"]["documentDate"])
        page.entry_date(data["documents"]["applyingForCard"]["entryDate"])
        page.operation_master(data["documents"]["applyingForCard"]["operationMaster"])
        page.account_details(data["documents"]["applyingForCard"]["accountDetails"])
        page.tracking_number(data["documents"]["applyingForCard"]["trackingNumber"])
        page.activity_kind(data["documents"]["applyingForCard"]["activityKind"])
        # Вкладка Дополнительно
        page.click_by_text("Дополнительно")
        page.card_number(data["documents"]["applyingForCard"]["cardNumber"])
        page.trustee(data["documents"]["applyingForCard"]["Trustee"])
        page.employee_position(data["documents"]["applyingForCard"]["employeePosition"])
        # # page.investment_program('value')
        # page.employee_name_in_ablative_case('value')
        # page.employee_position_in_ablative_case('value')
        page.foundation(data["documents"]["applyingForCard"]["foundation"])
        # Вкладка Уполномоченные лица
        page.click_by_text("Уполномоченные лица")
        page.chief(data["documents"]["applyingForCard"]["chief"])
        page.accountant_general(data["documents"]["applyingForCard"]["AccountantGeneral"])
        page.click_by_text("Проводки")
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = ApplyingForCardAddLinePage(self.driver)
        page.operation_master(data["documents"]["applyingForCard"]["operationMaster"])
        page.kbk(data["documents"]["applyingForCard"]["kbk"])
        page.kbk_type(data["documents"]["applyingForCard"]["kbkType"])
        page.kosgu(data["documents"]["applyingForCard"]["kosgu"])
        page.cost_element(data["documents"]["applyingForCard"]["costElement"])
        page.amount(data["documents"]["applyingForCard"]["amount"])
        page.goal_code(data["documents"]["applyingForCard"]["codeGoal"])
        page.department_unit(data["documents"]["applyingForCard"]["departmentUnit"])
        # page.act('value')
        page.payment_purpose(data["documents"]["applyingForCard"]["paymentPurpose"])
        page.comment(data["documents"]["applyingForCard"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        sleep(5)
        page.click_by_text("Закрыть")

    def te1st_decoding_amounts_unused_funds(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Расшифровка сумм неиспользованных средств")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = DecodingAmountsUnusedFundsPage(self.driver)
        page.document_number(data["documents"]["decodingAmountsUnusedFunds"]["documentNumber"])
        page.document_date(data["documents"]["decodingAmountsUnusedFunds"]["documentDate"])
        page.entry_date(data["documents"]["decodingAmountsUnusedFunds"]["entryDate"])
        page.card_number(data["documents"]["decodingAmountsUnusedFunds"]["cardNumber"])
        page.operation_type(data["documents"]["decodingAmountsUnusedFunds"]["operationType"])
        page.personal_account(data["documents"]["decodingAmountsUnusedFunds"]["personalAccount"])
        page.operation_master(data["documents"]["decodingAmountsUnusedFunds"]["operationMaster"])
        page.tracking_number(data["documents"]["decodingAmountsUnusedFunds"]["trackingNumber"])
        # page.investment_program('value')
        # Вкладка Уполномоченные лица
        page.click_by_text("Уполномоченные лица")
        page.chief(data["documents"]["decodingAmountsUnusedFunds"]["chief"])
        page.accountant_general(data["documents"]["decodingAmountsUnusedFunds"]["AccountantGeneral"])
        # Вкладка Расшифровка заявки
        page.click_by_text("Расшифровка заявки")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = DecodingAmountsUnusedFundsAddLinePage(self.driver)
        page.operation_master(data["documents"]["decodingAmountsUnusedFunds"]["operationMaster"])
        page.kosgu(data["documents"]["decodingAmountsUnusedFunds"]["kosgu"])
        page.cost_element(data["documents"]["decodingAmountsUnusedFunds"]["costElement"])
        page.kbk(data["documents"]["decodingAmountsUnusedFunds"]["kbk"])
        page.kbk_type(data["documents"]["decodingAmountsUnusedFunds"]["kbkType"])
        page.activity_kind(data["documents"]["decodingAmountsUnusedFunds"]["activityKind"])
        page.amount(data["documents"]["decodingAmountsUnusedFunds"]["amount"])
        page.goal_code(data["documents"]["decodingAmountsUnusedFunds"]["codeGoal"])
        page.department_unit(data["documents"]["decodingAmountsUnusedFunds"]["departmentUnit"])
        # page.act('value')
        page.comment(data["documents"]["decodingAmountsUnusedFunds"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        sleep(5)
        page.click_by_text("Закрыть")

    def te1st_application_cash_flow(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page = ApplicationCashFlowPage(self.driver)
        page.click_by_text("Заявка на кассовый расход")
        page.select_month("Январь", "2018")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        sleep(1)
        page.document_kind(data["documents"]["applicationCashFlow"]["documentKind"])
        page.document_number(data["documents"]["applicationCashFlow"]["documentNumber"])
        page.document_date(data["documents"]["applicationCashFlow"]["documentDate"])
        page.entry_date(data["documents"]["applicationCashFlow"]["entryDate"])
        sleep(1)
        page.limit_date(data["documents"]["applicationCashFlow"]["limitDate"])
        page.personal_account(data["documents"]["applicationCashFlow"]["personalAccount"])
        page.counterparty(data["documents"]["applicationCashFlow"]["organization"])
        page.bank_account_number(data["documents"]["applicationCashFlow"]["counterpartyAccountDetails"])
        page.number_ufk(data["documents"]["applicationCashFlow"]["ofkNumber"])
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        # Заполнение вкладки Реквизиты документа
        page.click_by_text("Реквизиты документа")
        page.currency(data["documents"]["applicationCashFlow"]["currency"])
        page.department_unit(data["documents"]["applicationCashFlow"]["departmentUnit"])
        # page.investment_program('value')
        page.priority(data["documents"]["applicationCashFlow"]["priority"])
        page.is_advance(1)
        page.priority_of_payment(data["documents"]["applicationCashFlow"]["paymentPriority"])
        page.payment_type(data["documents"]["applicationCashFlow"]["paymentForm"])
        page.payment_purpose(data["documents"]["applicationCashFlow"]["paymentPurpose"])
        # Заполнение вкладки документ основание
        page.click_by_text("Документ-основание")
        page.is_employee(1)
        sleep(5)
        page.employee(data["documents"]["applicationCashFlow"]["employee"])
        # page.imprest_foundation(data["documents"]["applicationCashFlow"]["documentFoundation"]) - !!!!!!!!!!!!!ошибка
        page.advance_report(data["documents"]["applicationCashFlow"]["advanceReport"])
        page.is_employee(0)
        # page.foundation(data["documents"]["applicationCashFlow"]["foundation"]) - !!!!!!!!!!!!!ошибка
        page.tracking_number(data["documents"]["applicationCashFlow"]["trackingNumber"])
        # page.document_foundaiont_kind('value')
        page.document_foundation_number(data["documents"]["applicationCashFlow"]["documentFoundationNumber"])
        page.document_foundation_date(data["documents"]["applicationCashFlow"]["documentFoundationDate"])
        page.document_foundation_subject(data["documents"]["applicationCashFlow"]["documentFoundationSubject"])
        # page.checker.check_text_select("documentFoundaiontKind", 'value')
        # page.checker.check_text_input("documentFoundationNumber", 'value')
        # page.checker.check_text_input("documentFoundationSubject", 'value')
        # page.checker.check_text_input("documentFoundationDate", 'value')
        # Расшифровка заявки - добавление строки
        page.click_by_text("Расшифровка заявки на кассовый расход")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = DecodingOfTheApplicationPage(self.driver)
        page.activity_kind(data["documents"]["applicationCashFlow"]["activityKind"])
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.kbk(data["documents"]["applicationCashFlow"]["kbk"])
        page.drawee_kbk_type(data["documents"]["applicationCashFlow"]["kbkType"])
        page.kosgu(data["documents"]["applicationCashFlow"]["kosgu"])
        sleep(5)
        page.cost_element(data["documents"]["applicationCashFlow"]["costElement"])
        page.amount(data["documents"]["applicationCashFlow"]["amount"])
        page.nds_percent(data["documents"]["applicationCashFlow"]["ndsPercent"])
        page.recepient_kbk(data["documents"]["applicationCashFlow"]["recepientKbk"])
        page.recepient_kbk_type(data["documents"]["applicationCashFlow"]["kbkType"])
        page.department(data["documents"]["applicationCashFlow"]["department"])
        # page.expenditure_goal_act('value')
        page.document_foundation_counterparty(data["documents"]["accountCashWarrant"]["organization"])
        # page.foundation('value')- !!!!!!!!!!!!!ошибка
        page.payment_purpose(data["documents"]["applicationCashFlow"]["paymentPurpose"])
        page.comment(data["documents"]["applicationCashFlow"]["comment"])
        # page.checker.check_text_input("amountWithoutNds", 'value', 2)
        # page.checker.check_text_input("ndsAmount", 'value', 2)
        page.act(data["documents"]["applicationCashFlow"]["act"])
        # page.goal_code('value')- !!!!!!!!!!!!!ошибка
        page.report_code(data["documents"]["applicationCashFlow"]["reportCode"])
        page.drawee_subsidy_code(data["documents"]["applicationCashFlow"]["draweeSubsidyCode"])
        page.recepient_subsidy_code(data["documents"]["applicationCashFlow"]["recepientSubsidyCode"])
        page.click_by_text("Сохранить", 2)
        # Реквизиты документов-оснований
        page.click_by_text("Реквизиты документов-оснований")
        page.click_by_text("Добавить", 2)
        page.click_by_text("Новую строку", 2)
        page = ApplicationCashFlowRequisitesPage(self.driver)
        # page.document('value')- !!!!!!!!!!!!!ошибка
        # page.document_type('value')- !!!!!!!!!!!!!ошибка
        page.document_number(data["documents"]["applicationCashFlow"]["documentNumber"])
        page.document_date(data["documents"]["applicationCashFlow"]["documentDate"])
        page.subject(data["documents"]["applicationCashFlow"]["documentFoundationSubject"])
        page.click_by_text("Сохранить", 2)
        # Реквизиты налоговых платежей
        page.click_by_text("Реквизиты налоговых платежей")
        page = ApplicationCashFlowRequisitesTaxPaymentsPage(self.driver)
        page.taxpayer_status(data["documents"]["applicationCashFlow"]["taxpayerStatus"])
        page.tax_period(data["documents"]["applicationCashFlow"]["taxPeriod"])
        page.is_tax(1)
        page.kbk(data["documents"]["applicationCashFlow"]["taxKbk"])
        page.tax_bill_number(data["documents"]["applicationCashFlow"]["taxBillNumber"])
        # page.oktmo(data["documents"]["applicationCashFlow"]["oktmo"])
        page.tax_bill_date(data["documents"]["applicationCashFlow"]["taxBillDate"])
        page.reason_for_payment(data["documents"]["applicationCashFlow"]["reasonForPayment"])
        page.click_by_text("Уполномоченные лица")
        page = ApplicationCashFlowPage(self.driver)
        page.chief(data["documents"]["applicationCashFlow"]["chief"])
        page.accountant_general(data["documents"]["applicationCashFlow"]["AccountantGeneral"])
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_payment_order_arrival(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page = PaymentOrderArrivalPage(self.driver)
        page.click_by_text("Платежное поручение (приход средств)")
        page.select_month("Январь", "2018")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page.document_number(data["documents"]["paymentOrderArrival"]["documentNumber"])
        page.recipient_account_details(data["documents"]["paymentOrderArrival"]["accountDetails"])
        page.operation(data["documents"]["paymentOrderArrival"]["operation"])
        page.entry_date(data["documents"]["paymentOrderArrival"]["entryDate"])
        page.drawee(data["documents"]["paymentOrderArrival"]["drawee"])
        page.drawee_account_details(data["documents"]["paymentOrderArrival"]["counterpartyAccountDetails"])
        page.tracking_number(data["documents"]["paymentOrderArrival"]["trackingNumber"])
        # Реквизиты документа
        page.click_by_text("Реквизиты документа")
        page.currency(data["documents"]["paymentOrderArrival"]["currency"])
        page.document_kind(data["documents"]["paymentOrderArrival"]["documentKind"])
        page.act(data["documents"]["paymentOrderArrival"]["act"])
        page.payment_purpose(data["documents"]["paymentOrderArrival"]["paymentPurpose"])
        page.is_employee(data["documents"]["paymentOrderArrival"]["employee"])
        page.department_unit(data["documents"]["paymentOrderArrival"]["departmentUnit"])
        page.purchasing_notice(data["documents"]["paymentOrderArrival"]["purchasingNotice"])
        page.notification_number(data["documents"]["paymentOrderArrival"]["notificationNumber"])
        page.payment_form(data["documents"]["paymentOrderArrival"]["paymentForm"])
        # Расшифровка поручения
        page.click_by_text("Расшифровка поручения")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = PaymentOrderArrivalBlankPage(self.driver)
        page.kbk(data["documents"]["paymentOrderArrival"]["kbk"])
        page.operation(data["documents"]["paymentOrderArrival"]["operation"])
        page.kosgu(data["documents"]["paymentOrderArrival"]["kosgu"])
        page.cost_element(data["documents"]["paymentOrderArrival"]["costElement"])
        page.department_unit(data["documents"]["paymentOrderArrival"]["departmentUnit"])
        page.act(data["documents"]["paymentOrderArrival"]["act"])
        # page.imprest_foundation(data["documents"]["paymentOrderArrival"]["foundation"]) -ошибка
        page.vat_percent(data["documents"]["paymentOrderArrival"]["ndsPercent"])
        page.amount(data["documents"]["paymentOrderArrival"]["amount"])
        page.comment(data["documents"]["paymentOrderArrival"]["comment"])
        page.click_by_text("Сохранить", 2)
        # Реквизиты налоговых платежей
        page.click_by_text("Реквизиты налоговых платежей")
        page = PaymentOrderArrivalRequisitesPage(self.driver)
        page.taxpayer_status(data["documents"]["paymentOrderArrival"]["taxpayerStatus"])
        page.kbk(data["documents"]["paymentOrderArrival"]["taxKbk"])
        # page.oktmo(data["documents"]["paymentOrderArrival"]["oktmo"])
        page.tax_period(data["documents"]["paymentOrderArrival"]["taxPeriod"])
        page.tax_bill_number(data["documents"]["paymentOrderArrival"]["taxBillNumber"])
        page.tax_bill_date(data["documents"]["paymentOrderArrival"]["taxBillDate"])
        page.reason_for_payment(data["documents"]["paymentOrderArrival"]["reasonForPayment"])
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_return_request(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Заявка на возврат")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = ReturnRequestPage(self.driver)
        page.document_number(data["documents"]["returnReques"]["documentNumber"])
        page.document_date(data["documents"]["returnReques"]["documentDate"])
        page.account_details(data["documents"]["returnReques"]["accountDetails"])
        page.recepient(data["documents"]["returnReques"]["recepient"])
        page.ofk_registration_number(data["documents"]["returnReques"]["ofkRegistrationNumber"])
        page.entry_date(data["documents"]["returnReques"]["entryDate"])
        page.operation(data["documents"]["returnReques"]["operation"])
        page.recepient_account_details(data["documents"]["returnReques"]["counterpartyAccountDetails"])
        page.document_kind(data["documents"]["returnReques"]["documentKind"])
        # Расшифровка заявки
        page.click_by_text("Расшифровка заявки")
        page.kbk(data["documents"]["returnReques"]["kbk"])
        page.kosgu(data["documents"]["returnReques"]["kosgu"])
        page.amount(data["documents"]["returnReques"]["amount"])
        page.nds_percent(data["documents"]["returnReques"]["ndsPercent"])
        page.kbk_type(data["documents"]["returnReques"]["kbkType"])
        page.cost_element(data["documents"]["returnReques"]["costElement"])
        page.type_funds_for_return(data["documents"]["returnReques"]["activityKind"])
        # Дополнительные реквизиты
        # page.goal_code(data["documents"]["returnReques"]["codeGoal"])
        # page.oktmo(data["documents"]["returnReques"]["oktmo"])
        page.department(data["documents"]["returnReques"]["department"])
        # page.investment_program('value')
        # page.expenditure_goal_act('value')
        # Информация о платеже
        page.priority_of_payment('5')
        page.payment_purpose('Назначение платежа - тест')
        page.payment_type('4 – срочно')
        # Документ-основание+Реквизиты получателя
        # page.document_foundation_kind('value')
        page.document_foundation_number(data["documents"]["returnReques"]["documentFoundationNumber"])
        page.document_foundation_date(data["documents"]["returnReques"]["documentFoundationDate"])
        page.recepient_kbk(data["documents"]["returnReques"]["taxKbk"])
        # page.recepient_oktmo(data["documents"]["returnReques"]["oktmo"])
        # Документ по зачислению невыясненного платежа
        page.click_by_text("Документ по зачислению невыясненного платежа")
        page.outstanding_payment_document_number(data["documents"]["returnReques"]["documentNumber"])
        page.outstanding_payment_document_date(data["documents"]["returnReques"]["documentDate"])
        page.outstanding_payment_document_amount(data["documents"]["returnReques"]["amount"])
        page.outstanding_payment_document_inn(data["documents"]["returnReques"]["outstandingPaymentDocumentInn"])
        page.outstanding_payment_document_kpp(data["documents"]["returnReques"]["outstandingPaymentDocumentKpp"])
        # Уполномоченные сотрудники
        page.click_by_text("Уполномоченные сотрудники")
        page.chief(data["documents"]["returnReques"]["chief"])
        page.chief_accountant(data["documents"]["returnReques"]["chiefAccountant"])
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_notification_of_the_type_and_payment_type(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Уведомления об уточнении вида и принадлежности платежа")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = NotificationTypeAndPaymentTypePage(self.driver)
        sleep(1)
        page.document_number(data["documents"]["notificationTypeAndPaymentType"]["documentNumber"])
        page.document_date(data["documents"]["notificationTypeAndPaymentType"]["documentDate"])
        page.entry_date(data["documents"]["notificationTypeAndPaymentType"]["entryDate"])
        page.account_details(data["documents"]["notificationTypeAndPaymentType"]["accountDetails"])
        page.activity_kind(data["documents"]["notificationTypeAndPaymentType"]["activityKind"])
        page.budget_commitment_info_number(
            data["documents"]["notificationTypeAndPaymentType"]["budgetCommitmentInfoNumber"])
        page.notification_kind(data["documents"]["notificationTypeAndPaymentType"]["notificationKind"])
        page.unit(data["documents"]["notificationTypeAndPaymentType"]["department"])
        # Реквизиты документа
        page.click_by_text("Реквизиты документа")
        page.counterparty(data["documents"]["notificationTypeAndPaymentType"]["organization"])
        # page.counterparty_account_details(
        # data["documents"]["notificationTypeAndPaymentType"]["counterpartyAccountDetails"]) -ошибка
        page.federal_treasury_request_number(data["documents"]["notificationTypeAndPaymentType"]["checkNumber"])
        page.federal_treasury_request_date(data["documents"]["notificationTypeAndPaymentType"]["documentDate"])
        page.region(data["documents"]["notificationTypeAndPaymentType"]["region"])
        page.is_employee(1)
        page.employee(data["documents"]["notificationTypeAndPaymentType"]["employee"])
        #page.passport('value')
        # Уполномоченные лица
        page.click_by_text("Уполномоченные лица")
        page.chief(data["documents"]["accountCashWarrant"]["chief"])
        page.contractor(data["documents"]["notificationTypeAndPaymentType"]["employee"])
        page.contractor_phone(data["documents"]["notificationTypeAndPaymentType"]["codeGoal"])
        # Реквизиты платежного документа
        page.click_by_text("Реквизиты платежного документа")
        page.click_by_text("Добавить")
        page = NotificationTypeAndPaymentTypeNotificationPage(self.driver)
        page.order_number(data["documents"]["notificationTypeAndPaymentType"]["region"])
        page.amount(data["documents"]["notificationTypeAndPaymentType"]["amount"])
        page.operation(data["documents"]["notificationTypeAndPaymentType"]["operation"])
        page.document_type(data["documents"]["notificationTypeAndPaymentType"]["documentKind"])
        page.document_number(data["documents"]["notificationTypeAndPaymentType"]["documentNumber"])
        page.document_date(data["documents"]["notificationTypeAndPaymentType"]["documentDate"])
        # page.billing_document('value') - ошибка
        # page.document_foundation(data["documents"]["notificationTypeAndPaymentType"]["documentFoundation"]) - ошибка
        page.recepient(data["documents"]["notificationTypeAndPaymentType"]["recepient"])
        page.recepient_name(data["documents"]["notificationTypeAndPaymentType"]["recepient"])
        # page.recepient_account_details(
        # data["documents"]["notificationTypeAndPaymentType"]["counterpartyAccountDetails"])
        page.inn(data["documents"]["notificationTypeAndPaymentType"]["inn"])
        page.kpp(data["documents"]["notificationTypeAndPaymentType"]["kpp"])
        page.oktmo(data["documents"]["notificationTypeAndPaymentType"]["oktmo"])
        page.kbk(data["documents"]["notificationTypeAndPaymentType"]["kbk"])
        page.kosgu(data["documents"]["notificationTypeAndPaymentType"]["kosgu"])
        page.cost_element(data["documents"]["notificationTypeAndPaymentType"]["costElement"])
        page.statement_analysis_code(data["documents"]["notificationTypeAndPaymentType"]["statementAnalysisCode"])
        page.purpose_code(data["documents"]["notificationTypeAndPaymentType"]["purposeCode"])
        # page.purpose_payment(data["documents"]["notificationTypeAndPaymentType"]["paymentPurpose"]) - Ошибка
        page.comment(data["documents"]["notificationTypeAndPaymentType"]["comment"])
        # Изменение реквизитов
        page.click_by_text("Добавить", 2)
        page = NotificationTypeAndPaymentTypeImagePage(self.driver)
        page.amount(data["documents"]["notificationTypeAndPaymentType"]["amount"])
        page.recepient(data["documents"]["notificationTypeAndPaymentType"]["recepient"])
        # page.recepient_account_details(data["documents"]["notificationTypeAndPaymentType"]["accountDetails"])
        page.inn(data["documents"]["notificationTypeAndPaymentType"]["inn"])
        page.kpp(data["documents"]["notificationTypeAndPaymentType"]["kpp"])
        page.oktmo(data["documents"]["notificationTypeAndPaymentType"]["oktmo"])
        page.recepient_personal_account(data["documents"]["notificationTypeAndPaymentType"]["personalAccount"])
        page.is_taxes(1)
        page.kbk(data["documents"]["notificationTypeAndPaymentType"]["kbk"])
        page.kosgu(data["documents"]["notificationTypeAndPaymentType"]["kosgu"])
        page.cost_element(data["documents"]["notificationTypeAndPaymentType"]["costElement"])
        page.recepient_kbk(data["documents"]["notificationTypeAndPaymentType"]["recepientKbk"])
        page.activity_kind(data["documents"]["notificationTypeAndPaymentType"]["activityKind"])
        page.purpose_code(data["documents"]["notificationTypeAndPaymentType"]["purposeCode"])
        page.statement_analysis_code(data["documents"]["notificationTypeAndPaymentType"]["statementAnalysisCode"])
        page.purpose_payment(data["documents"]["notificationTypeAndPaymentType"]["purposeCode"])
        page.click_by_text("Сохранить", 3)
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_basis_for_reporting_amounts(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Основание для выдачи подотчетных сумм")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = BasisForReportingAmountsPage(self.driver)
        sleep(5)
        # page.document_number("1")
        page.document_date(data["documents"]["basisForReportingAmounts"]["documentDate"])
        page.document_kind(data["documents"]["basisForReportingAmounts"]["documentKind"])
        page.employee(data["documents"]["basisForReportingAmounts"]["employee"])
        page.position(data["documents"]["basisForReportingAmounts"]["TrusteePosition"])
        page.department(data["documents"]["basisForReportingAmounts"]["department"])
        page.trip_start_date(data["documents"]["basisForReportingAmounts"]["documentDate"])
        page.trip_end_date(data["documents"]["basisForReportingAmounts"]["limitDate"])
        page.comment(data["documents"]["basisForReportingAmounts"]["comment"])
        page.trip_route('value')
        # добавление строки документа
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = BasisForReportingAmountsAddLinePage(self.driver)
        page.kbk(data["documents"]["basisForReportingAmounts"]["kbk"])
        page.kosgu(data["documents"]["basisForReportingAmounts"]["kosgu"])
        page.cost_element(data["documents"]["basisForReportingAmounts"]["costElement"])
        page.employee(data["documents"]["basisForReportingAmounts"]["employee"])
        page.position(data["documents"]["basisForReportingAmounts"]["TrusteePosition"])
        page.amount(data["documents"]["basisForReportingAmounts"]["amount"])
        page.comment(data["documents"]["basisForReportingAmounts"]["comment"])
        page.click_by_text("Сохранить", 2)
        # добавление копии строки документа
        page.table_select_row_click('221')
        page.click_by_text("Добавить")
        page.click_by_text("Копию строки")
        sleep(3)
        page.table_select_row_click('221', order=2)
        page.click_by_text("Открыть")
        page = BasisForReportingAmountsAddLinePage(self.driver)
        page.kbk(data["documents"]["basisForReportingAmounts"]["kbk"])
        page.kosgu(data["documents"]["basisForReportingAmounts"]["kosgu"])
        page.cost_element(data["documents"]["basisForReportingAmounts"]["costElement"])
        page.employee(data["documents"]["basisForReportingAmounts"]["employee"])
        page.position(data["documents"]["basisForReportingAmounts"]["TrusteePosition"])
        page.amount(data["documents"]["basisForReportingAmounts"]["amount"])
        page.comment(data["documents"]["basisForReportingAmounts"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Сохранить")

    def te1st_advance_report(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Авансовый отчет")
        page.click_by_text("Добавить")
        page.click_by_text("Добавить", 2)
        page = AvansReportPage(self.driver)
        page.document_kind(data["documents"]["avansReport"]["documentKind"])
        page.document_number(data["documents"]["avansReport"]["documentNumber"])
        page.document_date(data["documents"]["avansReport"]["documentDate"])
        sleep(3)
        page.entry_date(data["documents"]["avansReport"]["entryDate"])
        page.employee(data["documents"]["avansReport"]["employee"])
        page.position(data["documents"]["avansReport"]["TrusteePosition"])
        # page.department(data["documents"]["avansReport"]["department"]) -ошибка
        # page.employee_full_name('value')
        page.document_foundation(data["documents"]["avansReport"]["documentFoundation"])
        page.purpose(data["documents"]["avansReport"]["comment"])
        page.comment(data["documents"]["avansReport"]["comment"])
        # добавление копии строки документа
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = AvansReportAddLinePage(self.driver)
        page.operation_master(data["documents"]["avansReport"]["operationMaster"])
        page.kbk(data["documents"]["avansReport"]["kbk"])
        page.kosgu(data["documents"]["avansReport"]["kosgu"])
        page.cost_element(data["documents"]["avansReport"]["costElement"])
        page.document_date(data["documents"]["avansReport"]["documentDate"])
        page.document_number(data["documents"]["avansReport"]["documentNumber"])
        page.amount(data["documents"]["avansReport"]["amount"])
        page.comment(data["documents"]["avansReport"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("НФА", 2)
        page.click_by_text("Добавить", 2)
        page.click_by_text("Закрыть", 2)
        page.click_by_text("Связанные документы")
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_payment_order_through_contract_with_the_supplier(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page = ContractWithSupplierPage(self.driver, 5)
        page.select_month("Январь", "2018")
        page.click_by_text("Договор с поставщиком")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page.document_type("Договор")
        page.document_number(data["documents"]["contractWithSupplier"]["documentNumber"])
        page.document_date(data["documents"]["contractWithSupplier"]["documentDate"])
        sleep(4)
        page.counter_party(data["documents"]["contractWithSupplier"]["drawee"])
        page.bank_account_number(data["documents"]["contractWithSupplier"]["counterpartyAccountDetails"])
        page.uin(data["documents"]["contractWithSupplier"]["recepientSubsidyCode"])
        page.currency(data["documents"]["contractWithSupplier"]["currency"])
        # вкладка  Условия договора
        page.click_by_text("Условия договора")
        page.personal_account(data["documents"]["contractWithSupplier"]["personalAccount"])
        page.payment_type(data["documents"]["contractWithSupplier"]["paymentForm"])
        # page.budget_commitment(data["documents"]["contractWithSupplier"]["paymentForm"]) - ошибка
        page.payment_against_invoice(1)
        page.date_begin(data["documents"]["contractWithSupplier"]["documentDate"])
        page.date_end(data["documents"]["contractWithSupplier"]["limitDate"])
        page.security_type(data["documents"]["contractWithSupplier"]["securityType"])
        page.security_amount(data["documents"]["contractWithSupplier"]["amount"])
        page.security_period(data["documents"]["contractWithSupplier"]["limitDate"])
        page.sending_letter_number(data["documents"]["contractWithSupplier"]["priority"])
        page.assurance_register_record_number(
            data["documents"]["contractWithSupplier"]["outstandingPaymentDocumentInn"])
        page.letter_date(data["documents"]["contractWithSupplier"]["documentDate"])
        page.note(data["documents"]["contractWithSupplier"]["comment"])
        page.responsible(data["documents"]["contractWithSupplier"]["employee"])
        page.department_unit(data["documents"]["contractWithSupplier"]["departmentUnit"])
        page.penalty_period(data["documents"]["contractWithSupplier"]["penaltyPeriod"])
        page.penalty_percent(data["documents"]["contractWithSupplier"]["ndsPercent"])
        page.penalty_amount(data["documents"]["contractWithSupplier"]["amount"])
        page.subject_contract(data["documents"]["contractWithSupplier"]["comment"])
        page.payment_terms(data["documents"]["contractWithSupplier"]["paymentTerm"])
        page.prolongation_term(data["documents"]["contractWithSupplier"]["comment"])
        sleep(1)
        # Вкладка Детализация по КБК
        page.click_by_text("Детализация по КБК")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = ContractWithSupplierDetailKBKPage(self.driver)
        page.financial_year(data["documents"]["contractWithSupplier"]["financialYear"])
        page.entry_date(data["documents"]["contractWithSupplier"]["entryDate"])
        page.changed(1)
        page.operation(data["documents"]["contractWithSupplier"]["operation"])
        page.kbk(data["documents"]["contractWithSupplier"]["kbk"])
        page.kosgu(data["documents"]["contractWithSupplier"]["kosgu"])
        page.cost_element(data["documents"]["contractWithSupplier"]["costElement"])
        page.contract_subject(data["documents"]["contractWithSupplier"]["comment"])
        page.department(data["documents"]["contractWithSupplier"]["department"])
        page.budgetary_plan_act(data["documents"]["contractWithSupplier"]["act"])
        # page.investment_program('value')
        page.department_unit(data["documents"]["contractWithSupplier"]["departmentUnit"])
        page.work(data["documents"]["contractWithSupplier"]["work"])
        page.amounts_amount(data["documents"]["contractWithSupplier"]["amount"])
        page.amounts_nds_percent(data["documents"]["contractWithSupplier"]["ndsPercent"])
        page.advance(data["documents"]["contractWithSupplier"]["amount"])
        page.click_by_text("Сохранить", 2)
        # Вкладка Детализация по ОКПД2
        page.click_by_text("Детализация по ОКПД2")
        page.click_by_text("Добавить", 2)
        page = ContractWithSupplierDetailOKPDPage(self.driver)
        page.order_number(data["documents"]["contractWithSupplier"]["region"])
        # page.okpd2(data["documents"]["contractWithSupplier"]["okpd2"])
        page.unit_of_measure(data["documents"]["contractWithSupplier"]["unitOfMeasure"])
        page.unit_price(data["documents"]["contractWithSupplier"]["amount"])
        page.quantity(data["documents"]["contractWithSupplier"]["quantity"])
        page.amount(data["documents"]["contractWithSupplier"]["amount"])
        page.click_by_text("Сохранить", 2)
        # Вкладка Сведения о госконтракте
        page.click_by_text("Сведения о госконтракте")
        page = InformationAboutContractPage(self.driver)
        page.aviso(data["documents"]["contractWithSupplier"]["aviso"])
        page.purchase_identity(data["documents"]["contractWithSupplier"]["checkSeries"])
        page.register_record_number(data["documents"]["contractWithSupplier"]["budgetCommitmentInfoNumber"])
        page.registration_date(data["documents"]["contractWithSupplier"]["documentDate"])
        page.privacy(data["documents"]["contractWithSupplier"]["privacy"])
        page.confirm_document_number(data["documents"]["contractWithSupplier"]["documentNumber"])
        page.confirm_document_date(data["documents"]["contractWithSupplier"]["documentDate"])
        # page.confirm_document_kind(data["documents"]["contractWithSupplier"]["documentKind"]) -Ошибка
        page.comment(data["documents"]["contractWithSupplier"]["comment"])
        # page.department(data["documents"]["contractWithSupplier"]["department"])-Ошибка
        page.auction_date(data["documents"]["contractWithSupplier"]["documentDate"])
        page.declared_value(data["documents"]["contractWithSupplier"]["amount"])
        page.change_foundation(data["documents"]["contractWithSupplier"]["foundation"])
        page.for_small_entrepreneur(1)
        page.domestic_goods_preference(1)
        page.perfomance_document_number(data["documents"]["contractWithSupplier"]["documentNumber"])
        page.contract_performance_date(data["documents"]["contractWithSupplier"]["documentDate"])
        page.terminated_by(data["documents"]["contractWithSupplier"]["terminatedBy"])
        page.contract_cancellation_record_number(data["documents"]["contractWithSupplier"]["recepientSubsidyCode"])
        page.contract_perfomance_foundation(data["documents"]["contractWithSupplier"]["foundation"])
        # Вкладка История изменений
        page.click_by_text("История изменений")
        page.click_by_text("Добавить", 3)
        page = HistoryPage(self.driver)
        page.change_date(data["documents"]["contractWithSupplier"]["documentDate"])
        page.change_number(data["documents"]["contractWithSupplier"]["documentNumber"])
        page.change_type(data["documents"]["contractWithSupplier"]["changeType"])
        page.comment(data["documents"]["contractWithSupplier"]["comment2"])
        page.click_by_text("Сохранить", 2)
        # Вкладка Календарный план
        page.click_by_text("Календарный план")
        page.click_by_text("Добавить", 4)
        page = CalendarPlanPage(self.driver)
        page.financial_year(data["documents"]["contractWithSupplier"]["financialYear"])
        page.work_name(data["documents"]["contractWithSupplier"]["comment2"])
        page.result(data["documents"]["contractWithSupplier"]["comment"])
        page.comment(data["documents"]["contractWithSupplier"]["comment"])
        page.start_date(data["documents"]["contractWithSupplier"]["documentDate"])
        page.end_date(data["documents"]["contractWithSupplier"]["limitDate"])
        page.amount(data["documents"]["contractWithSupplier"]["amount"])
        page.click_by_text("Сохранить", 2)
        # Вкладка Дополнительные контрагенты
        page.click_by_text("Дополнительные контрагенты")
        page.click_by_text("Добавить", 5)
        page.counterparty(data["documents"]["contractWithSupplier"]["organization"])
        # page.account_details(data["documents"]["contractWithSupplier"]["accountDetails"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Сканы документов")
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_ensuring_fulfillment_of_obligations(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Обеспечение исполнения обязательств")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = EnsuringFulfillmentOfObligationsPage(self.driver)
        page.document_number(data["documents"]["ensuringFulfillmentOfObligations"]["documentNumber"])
        page.document_date(data["documents"]["ensuringFulfillmentOfObligations"]["documentDate"])
        page.operation(data["documents"]["ensuringFulfillmentOfObligations"]["operation"])
        page.counterparty(data["documents"]["ensuringFulfillmentOfObligations"]["organization"])
        page.entry_date(data["documents"]["ensuringFulfillmentOfObligations"]["entryDate"])
        page.retirement_date(data["documents"]["ensuringFulfillmentOfObligations"]["limitDate"])
        page.amount(data["documents"]["ensuringFulfillmentOfObligations"]["amount"])
        page.guarantor(data["documents"]["ensuringFulfillmentOfObligations"]["organization"])
        page.assurance_starts(data["documents"]["ensuringFulfillmentOfObligations"]["documentDate"])
        page.assurance_ends(data["documents"]["ensuringFulfillmentOfObligations"]["limitDate"])
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_information_about_budget_obligation(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Сведения о бюджетном обязательстве")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = InformationAboutBudgetObligationPage(self.driver)
        page.document_number(data["documents"]["informationAboutBudgetObligation"]["documentNumber"])
        page.document_date(data["documents"]["informationAboutBudgetObligation"]["documentDate"])
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.liability(data["documents"]["informationAboutBudgetObligation"]["liability"])
        # Вкладка
        page.tracking_number(data["documents"]["informationAboutBudgetObligation"]["trackingNumber"])
        page.registration_date(data["documents"]["informationAboutBudgetObligation"]["documentDate"])
        page.account_details(data["documents"]["informationAboutBudgetObligation"]["accountDetails"])
        page.guid(data["documents"]["informationAboutBudgetObligation"]["guid"])
        page.counterparty(data["documents"]["informationAboutBudgetObligation"]["organization"])
        # page.transaction_account('value')
        page.chief(data["documents"]["informationAboutBudgetObligation"]["chief"])
        page.prepared_by(data["documents"]["informationAboutBudgetObligation"]["AccountantGeneral"])
        # Расшифровка обязательства
        page.click_by_text("Расшифровка обязательства")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = InformationAboutBudgetObligationAddLinePage(self.driver)
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.kbk(data["documents"]["informationAboutBudgetObligation"]["kbk"])
        page.kosgu(data["documents"]["informationAboutBudgetObligation"]["kosgu"])
        page.activity_kind(data["documents"]["informationAboutBudgetObligation"]["activityKind"])
        page.kbk_type(data["documents"]["informationAboutBudgetObligation"]["kbkType"])
        page.comment(data["documents"]["informationAboutBudgetObligation"]["comment"])
        # page.investment_program('value')
        # Суммы на текущий год
        page.current_year_amounts(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.february(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.march(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.april(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.may(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.june(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.july(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.august(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.september(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.october(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.november(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.december(data["documents"]["informationAboutBudgetObligation"]["amount"])
        # Суммы на плановый период
        page.first_year_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.second_year_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.third_year_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.other_years_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        # Суммы прошлых лет
        page.completed_amout(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.not_completed_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.conditional_payment(1)
        page.analytical_code(data["documents"]["informationAboutBudgetObligation"]["codeGoal"])
        page.act(data["documents"]["informationAboutBudgetObligation"]["act"])
        page.payment_day(data["documents"]["informationAboutBudgetObligation"]["ndsPercent"])
        page.click_by_text("Сохранить", 2)
        # История изменений
        page.click_by_text("История изменений")
        page.click_by_text("Добавить", 2)
        page = InformationAboutBudgetObligationHistoryPage(self.driver)
        page.change_number(data["documents"]["informationAboutBudgetObligation"]["documentNumber"])
        page.change_date(data["documents"]["informationAboutBudgetObligation"]["documentDate"])
        page.comment(data["documents"]["informationAboutBudgetObligation"]["comment2"])
        page.click_by_text("Сохранить", 2)
        sleep(5)
        page.click_by_text("Да")
        # Реквизиты документа-основания
        page.click_by_text("Реквизиты документа-основания")
        page = InformationAboutBudgetObligationRequisitesPage(self.driver)
        page.document_foundation_kind(data["documents"]["informationAboutBudgetObligation"]["documentFoundationKind"])
        page.document_foundation_number(
            data["documents"]["informationAboutBudgetObligation"]["documentFoundationNumber"])
        page.document_foundation_date(data["documents"]["informationAboutBudgetObligation"]["documentFoundationDate"])
        page.document_fondation_currency(data["documents"]["informationAboutBudgetObligation"]["currency"])
        page.amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.currency_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.advance_percent(data["documents"]["informationAboutBudgetObligation"]["ndsPercent"])
        page.advance_amount(data["documents"]["informationAboutBudgetObligation"]["amount"])
        page.register_record_number(data["documents"]["informationAboutBudgetObligation"]["draweeSubsidyCode"])
        page.document_foundation_subject(
            data["documents"]["informationAboutBudgetObligation"]["documentFoundationSubject"])
        # Дополнительные контрагенты
        page.click_by_text("Дополнительные контрагенты")
        page.click_by_text("Добавить", 3)
        page = InformationAboutBudgetObligationDopPage(self.driver)
        page.counterparty(data["documents"]["informationAboutBudgetObligation"]["organization"])
        page.account_details(data["documents"]["informationAboutBudgetObligation"]["counterpartyAccountDetails"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_invoice_from_the_supplier(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Счет от поставщика")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = InvoiceFromTheSupplierPage(self.driver)
        page.document_number(data["documents"]["invoiceFromTheSupplier"]["documentNumber"])
        page.document_date(data["documents"]["invoiceFromTheSupplier"]["documentDate"])
        page.paid_date(data["documents"]["invoiceFromTheSupplier"]["documentDate"])
        page.entry_date(data["documents"]["invoiceFromTheSupplier"]["entryDate"])
        page.operation(data["documents"]["invoiceFromTheSupplier"]["operation"])
        page.department_unit(data["documents"]["invoiceFromTheSupplier"]["departmentUnit"])
        page.supplier(data["documents"]["invoiceFromTheSupplier"]["drawee"])
        page.supplier_account_detail(data["documents"]["invoiceFromTheSupplier"]["counterpartyAccountDetails"])
        page.account_details(data["documents"]["invoiceFromTheSupplier"]["accountDetails"])
        page.note(data["documents"]["invoiceFromTheSupplier"]["comment"])
        sleep(4)
        # Добавляем документ счет от поставщика строку
        page = InvoiceFromTheSupplierAddLinePage(self.driver)
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page.kbk(data["documents"]["invoiceFromTheSupplier"]["kbk"])
        page.kosgu(data["documents"]["invoiceFromTheSupplier"]["kosgu"])
        page.cost_element(data["documents"]["basisForReportingAmounts"]["costElement"])
        page.act(data["documents"]["basisForReportingAmounts"]["act"])
        # page.okpd2('value')
        page.comment(data["documents"]["invoiceFromTheSupplier"]["comment"])
        page.amount(data["documents"]["invoiceFromTheSupplier"]["amount"])
        page.vat_percent(data["documents"]["basisForReportingAmounts"]["ndsPercent"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def te1st_invoice_from_vendor(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Счет-фактура от поставщика")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = InvoiceFromVendorPage(self.driver)
        page.document_kind(data["documents"]["invoiceFromVendor"]["documentKind"])
        page.document_number(data["documents"]["invoiceFromVendor"]["documentNumber"])
        page.document_date(data["documents"]["invoiceFromVendor"]["documentDate"])
        page.received_date(data["documents"]["invoiceFromVendor"]["documentDate"])
        page.correction_number(data["documents"]["invoiceFromVendor"]["documentNumber"])
        page.correction_date(data["documents"]["invoiceFromVendor"]["documentDate"])
        page.editable(data["documents"]["invoiceFromVendor"]["editable"])
        page.vendor(data["documents"]["invoiceFromVendor"]["recepient"])
        page.billing_type(data["documents"]["invoiceFromVendor"]["billingType"])
        # page.nds_operation_code('value')
        page.public_contract_identifier(data["documents"]["invoiceFromVendor"]["comment3"])
        page.mercantile_agent(data["documents"]["invoiceFromVendor"]["organization"])
        page.employee(data["documents"]["invoiceFromVendor"]["employee"])
        page.department_unit(data["documents"]["invoiceFromVendor"]["departmentUnit"])
        page.trip(data["documents"]["invoiceFromVendor"]["documentFoundation"])
        page.operation(data["documents"]["invoiceFromVendor"]["operation"])
        page.entry_date(data["documents"]["invoiceFromVendor"]["entryDate"])
        page.capitalization_date(data["documents"]["invoiceFromVendor"]["documentDate"])
        page.comment(data["documents"]["invoiceFromVendor"]["comment"])
        page.scroll_to_bottom()
        # Счет-фактура от поставщика - добавление строки
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = InvoiceFromVendorAddLinePage(self.driver)
        page.goods_name(data["documents"]["invoiceFromVendor"]["comment"])
        page.kbk(data["documents"]["invoiceFromVendor"]["kbk"])
        page.kosgu(data["documents"]["invoiceFromVendor"]["kosgu"])
        page.cost_elements(data["documents"]["invoiceFromVendor"]["costElement"])
        page.act(data["documents"]["invoiceFromVendor"]["act"])
        page.unit_of_measure(data["documents"]["invoiceFromVendor"]["unitOfMeasure"])
        page.quantity(data["documents"]["invoiceFromVendor"]["quantity"])
        page.price(data["documents"]["invoiceFromVendor"]["amount"])
        page.nds_percent(data["documents"]["invoiceFromVendor"]["ndsPercent"])
        page.amount(data["documents"]["invoiceFromVendor"]["amount"])
        page.excise_duty(data["documents"]["invoiceFromVendor"]["amount"])
        page.cargo_custom_declaration(data["documents"]["invoiceFromVendor"]["checkSeries"])
        # page.origin_country('value') -ошибка
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_incoming_act(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Акт входящий")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = IncomingActPage(self.driver)
        page.document_kind(data["documents"]["basisForReportingAmounts"]["documentKind"])
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.contractor('value')
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        # Акт входящий - добавление строки
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = IncomingActAddLinePage(self.driver)
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_elements(data["documents"]["invoiceFromVendor"]["costElement"])
        page.nds_percent(data["documents"]["incomeCashOrder"]["ndsPercent"])
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.advance_offset('value')
        page.under_repair('value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_information_about_the_monetary_obligation(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Сведения о денежном обязательстве")
        page.click_by_text("Добавить")
        page.click_by_text("Новый документ")
        page = InformationAboutTheMonetaryObligationPage(self.driver)
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.tracking_number(data["documents"]["applicationForCashWithdrawal"]["trackingNumber"])
        page.currency(data["documents"]["applicationCashFlow"]["currency"])
        page.is_advance('value')
        page.registration_date('value')
        page.personal_account(data["documents"]["decodingAmountsUnusedFunds"]["personalAccount"])
        page.counterparty(data["documents"]["accountCashWarrant"]["organization"])
        page.counterparty_account_detail('value')
        page.guid('value')
        page.chief(data["documents"]["accountCashWarrant"]["chief"])
        page.accountant_general(data["documents"]["applyingForCard"]["AccountantGeneral"])
        # Реквизиты документа-основания
        page.click_by_text("Реквизиты документа-основания")
        page.document_foundation_kind('value')
        page.foundation_number('value')
        page.foundation_date('value')
        page.foundation_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.foundation_subject('value')
        # Расшифровка обязательства
        page.click_by_text("Расшифровка обязательства")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = InformationAboutTheMonetaryObligationAddLinePage(self.driver)
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kbk_type(data["documents"]["applicationForCashWithdrawal"]["kbkType"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.activity_kind(data["documents"]["applyingForCard"]["activityKind"])
        # page.investment_program('value')
        page.analytical_code('value')
        page.advance_transfered('value')
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.currency_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.click_by_text("Сохранить", 2)
        # История изменений
        page.click_by_text("История изменений")
        page.click_by_text("Добавить")
        page = InformationAboutTheMonetaryObligationHistoryPage(self.driver)
        page.change_number('value')
        page.change_date('value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.click_by_text("Сохранить", 2)
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_creation_document_admission_nfa(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.click_by_text("Поступление НФА")
        page.click_by_text("Добавить")
        # ШАПКА ДОКУМЕНТА
        page = ReceiptOfNonFinancialAssetsCapPage(self.driver)
        page.document_number("1")
        page.document_kind(data["documents"]["basisForReportingAmounts"]["documentKind"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.materially_responsible_person('value')
        page.sender_sender_type('value')
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        page.storage('value')
        page.advance_report(data["documents"]["incomeCashOrder"]["advanceReport"])
        page.sender_foundation(data["documents"]["incomeCashOrder"]["foundation"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])

        # СТРОКА ДОКУМЕНТА
        # СОЗДАТЬ СТРОКУ "ОС,НМА" -
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новая строка ОС, НМА")
        page = ReceiptOfNonFinancialAssetsRowPage(self.driver)
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.amortization('value')
        page.tag_no('value')
        page.checker.check_text_input('value')
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.nds_percent(data["documents"]["incomeCashOrder"]["ndsPercent"])
        page.advance_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.actually_used('value')
        page.checker.check_text("accountableAmount", 'value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.foundation(data["documents"]["incomeCashOrder"]["foundation"])
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.storage('value')
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.scroll_modal_to_bottom()
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.click_by_text("Сохранить", order=2)
        # Новая строка МЗ
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новая строка МЗ")
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.amortization('value')
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.nds_percent(data["documents"]["incomeCashOrder"]["ndsPercent"])
        page.advance_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.tag_no('value')
        page.additional_features('value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.foundation(data["documents"]["incomeCashOrder"]["foundation"])
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.storage('value')
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.scroll_modal_to_bottom()
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_move_nfa(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.click_by_text("Перемещение НФА")
        page.click_by_text("Добавить")
        # ШАПКА ДОКУМЕНТА
        page = MoveNFAPage(self.driver)
        page.document_kind(data["documents"]["basisForReportingAmounts"]["documentKind"])
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.addressee_materially_responsible_person('value')
        page.addressee_storage('value')
        page.sending_end_materially_responsible_person('value')
        page.sending_end_storage('value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        # СОЗДАТЬ СТРОКУ "ОС,НМА" -
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новая строка ОС, НМА")
        page = MoveNFAAddNFAPage(self.driver)
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.tag_no('value')
        page.item('value')
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.sender_foundation(data["documents"]["incomeCashOrder"]["foundation"])
        # Вкладка аналитика
        page.click_by_text("Аналитика")
        page = MoveNFAAddNFADopPage(self.driver)
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.storage('value')
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        # Вкладка Новый номер
        page.click_by_text("Новый номер")
        page.new_tag_no('value')
        page.new_item('value')
        page.new_quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.click_by_text("Сохранить", order=2)
        # СОЗДАТЬ СТРОКУ  - Новая строка МЗ
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новая строка МЗ")
        page = MoveNFAAddNFAPage(self.driver)
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.tag_no('value')
        page.item('value')
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.sender_foundation(data["documents"]["incomeCashOrder"]["foundation"])
        page.additional_features('value')
        # Вкладка аналитика
        page.click_by_text("Аналитика")
        page = MoveNFAAddNFADopPage(self.driver)
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.department_unit(data["documents"]["incomeCashOrder"]["departmentUnit"])
        page.storage('value')
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        # Вкладка Новый номер
        page.click_by_text("Новый номер")
        page.new_tag_no('value')
        page.new_item('value')
        page.new_quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.new_additional_features('value')
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_retirement_nfa(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.click_by_text("Выбытие НФА")
        page.click_by_text("Добавить")
        page = RetirementNfaPage(self.driver)
        page.document_kind(data["documents"]["basisForReportingAmounts"]["documentKind"])
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.retirement_addressee_type('value')
        page.department(data["documents"]["applicationCashFlow"]["department"])
        page.retirement_addressee_type('value')
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        page.materially_responsible_person('value')
        page.storage('value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.committee_conclusion('value')
        # СОЗДАТЬ СТРОКУ "ОС,НМА" -
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новая строка ОС, НМА")
        page = RetirementNfaAddPage(self.driver)
        page.tag_no('value')
        page.amortization('value')
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.price('value')
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        # Вкладка аналитики
        page.click_by_text("Аналитики")
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.department(data["documents"]["applicationCashFlow"]["department"])
        page.storage('value')
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        # Вкладка Ремонт ОС
        page.click_by_text("Ремонт ОС")
        page.under_repair_tag_no('value')
        page.under_repair('value')
        page.click_by_text("Сохранить", order=2)
        # СОЗДАТЬ СТРОКУ  - Новая строка МЗ
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новая строка МЗ")
        page.tag_no('value')
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.price('value')
        page.additional_features('value')
        page.amount(data["documents"]["incomeCashOrder"]["amount"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        # Вкладка аналитики
        page.click_by_text("Аналитики")
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.department(data["documents"]["applicationCashFlow"]["department"])
        page.storage('value')
        page.organization(data["documents"]["incomeCashOrder"]["organization"])
        # Вкладка Ремонт ОС
        page.click_by_text("Ремонт ОС")
        page.under_repair_tag_no('value')
        page.under_repair('value')
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_accrual_of_amortization_on_the_os_under_the_account(self):
        # Начисление Амортизации на ОС
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Март", "2018")
        page.click_by_text("Начисление амортизации")
        page.click_by_text('Добавить')
        page.click_by_text('Расчет по бухгалтерским данным')
        page = AccountingCalculationPage(self.driver)
        page.balances_collection_date("01.03.2018")
        page.operation_date("01.03.2018")
        page.balance_sheet_account("1 101 34")
        page.click_by_text('Выполнить')
        sleep(5)
        page.click_by_text('Да')
        page.click_by_text('Сохранить')
        page.click_by_text('Закрыть')
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Начисление амортизации")
        page.click_by_text('Добавить')
        page.click_by_text("Новый документ")
        page = DepreciationPage(self.driver)
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.accrual_parameters('value')
        # Строки документа
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новый объект ОС, НМА")
        page = DepreciationAddLinePage(self.driver)
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.tag_no('value')
        page.balance_sheet_account('value')
        page.actually_used('value')
        page.carrying_value('value')
        page.current_amortization('value')
        page.accrued_depreciation('value')
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.materially_responsible_person('value')
        page.comment(data["documents"]["incomeCashOrder"]["comment"])
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_inventory_n_f_a(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Инвентаризация НФА ")
        page.click_by_text('Добавить')
        page = InventoryNFAPage(self.driver)
        page.balances_collection_date('value')
        page.balance_sheet_account('value')
        page.balance_sheet_account_group('value')
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.committee('value')
        page.inventory_location('value')
        page.inventory_start_date('value')
        page.inventory_end_date('value')
        page.committee_conclusion('value')
        page.fill_actual_availability('value')
        page.materially_responsible_person('value')
        page.storage('value')
        page.separate_documents_by_materially_responsible_person('value')
        page.click_by_text('Выполнить')
        # Добавление строки
        page.click_by_text("Добавить")
        page.click_by_text("Новый объект ОС, НМА")
        page = InventoryNFAAddLinePage(self.driver)
        page.tag_no_basic_facilities('value')
        page.in_fact_quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.in_fact_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.in_fact_materially_responsible_person('value')
        page.in_fact_storage('value')
        page.click_by_text("Сохранить", order=2)
        # Добавление строки МЗ
        page.click_by_text("Добавить")
        page.click_by_text("Новый объект МЗ")
        page.tag_no_basic_facilities('value')
        page.in_fact_quantity(data["documents"]["incomeCashOrder"]["quantity"])
        page.in_fact_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.in_fact_materially_responsible_person('value')
        page.in_fact_storage('value')
        page.additional_features('value')
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_procurement_notice(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Извещение о проведении закупки")
        page.click_by_text('Добавить')
        page.click_by_text("Новый документ")
        page = ProcurementNoticePage(self.driver)
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.document_number(data["documents"]["incomeCashOrder"]["documentNumber"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.publish_date('value')
        page.demander('value')
        page.winner('value')
        page.order_placement('value')
        page.identity_code('value')
        page.responsible('value')
        page.budget_commitment_info('value')
        page.works('value')
        page.contract_date('value')
        page.procedure_failure_date('value')
        page.starting_price('value')
        page.cost('value')
        page.tender_security('value')
        # Добавляем строку документа
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = ProcurementNoticeAddLinePage(self.driver)
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.starting_price('value')
        page.cost('value')
        page.works('value')
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_estimated_income(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Смета доходов")
        page.click_by_text('Добавить')
        page.click_by_text("Новый документ")
        page = EstimatedIncomePage(self.driver)
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.document_date(data["documents"]["incomeCashOrder"]["documentDate"])
        page.entry_date(data["documents"]["incomeCashOrder"]["entryDate"])
        page.recipient('value')
        page.account_details(data["documents"]["applicationForCashWithdrawal"]["accountDetails"])
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        # Расшифровка документа
        page.click_by_text("Расшифровка документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = EstimatedIncomeAddLinePage(self.driver)
        page.item_date('value')
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.current_year_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.first_plan_year_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.second_plan_year_amount(data["documents"]["incomeCashOrder"]["amount"])
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")

    def test_budget_estimates(self):
        page = MenuPage(self.driver)
        page.click_to_eagle()
        page.select_month("Январь", "2018")
        page.click_by_text("Бюджетная смета")
        page.click_by_text('Добавить')
        page.click_by_text("Новый документ")
        page = BudgetEstimatesPage(self.driver)
        page.financial_year(data["documents"]["informationAboutBudgetObligation"]["financialYear"])
        page.account('value')
        page.operation(data["documents"]["applicationCashFlow"]["operation"])
        # Добавляем строку документа
        page.click_by_text("Строки документа")
        page.click_by_text("Добавить")
        page.click_by_text("Новую строку")
        page = BudgetEstimatesAddLinePage(self.driver)
        page.line_create_date('value')
        page.kbk(data["documents"]["incomeCashOrder"]["kbk"])
        page.kosgu(data["documents"]["incomeCashOrder"]["kosgu"])
        page.cost_element(data["documents"]["incomeCashOrder"]["costElement"])
        page.part_number('value')
        page.current_year_amount_b_a('value')
        page.first_plan_year_amount_b_a('value')
        page.second_plan_year_amount_b_a('value')
        page.current_year_amount_l_b_o('value')
        page.first_plan_year_amount_l_b_o('value')
        page.second_plan_year_amount_l_b_o('value')
        page.click_by_text("Сохранить", order=2)
        page.click_by_text("Проводки")
        page.click_by_text("Сохранить")
        page.click_by_text("Закрыть")


